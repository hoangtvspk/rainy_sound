# Các stages pipeline
stages:
  - analyze
  - test
  - build
  - deploy

variables:
  FLUTTER_CHANNEL: "stable"
  CACHE_KEY: ${CI_COMMIT_REF_SLUG}

cache:
  key: ${CACHE_KEY}
  paths:
    - .pub-cache
    - build/
    - .dart_tool/
    - .flutter-plugins
    - .flutter-plugins-dependencies
  policy: pull-push
  when: on_success
  expire_in: 1 week
  rules:
    - if: "$CI_COMMIT_TAG =~ /no-cache/"
      when: never
    - when: on_success

before_script:
  - *setup_environment
  - *setup_google_play_service_account
  - flutter channel $FLUTTER_CHANNEL
  - flutter upgrade
  - flutter pub get

# ANALYZE và TEST chạy bình thường trên branch
analyze:
  stage: analyze
  script:
    - make analyze

test:
  stage: test
  script:
    - make test

# BUILD & DEPLOY DEV
build-dev:
  stage: build
  variables:
    ENVIRONMENT: "dev"
  <<: *retry_config
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_build
  artifacts:
    paths:
      - build/app/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa

deploy-dev:
  stage: deploy
  variables:
    ENVIRONMENT: "dev"
    FIREBASE_APP_ID_PARAM: "firebase_app_id=$FIREBASE_IOS_APP_ID"
  needs:
    - build-dev
  <<: *retry_config
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_deploy

# BUILD & DEPLOY STAGING
build-staging:
  stage: build
  variables:
    ENVIRONMENT: "staging"
  <<: *retry_config
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_build
  artifacts:
    paths:
      - build/app/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa

deploy-staging:
  stage: deploy
  variables:
    ENVIRONMENT: "staging"
    FIREBASE_APP_ID_PARAM: "firebase_app_id=$FIREBASE_IOS_APP_ID"
  <<: *retry_config
  needs:
    - build-staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_deploy

# BUILD & DEPLOY PROD
build-prod:
  stage: build
  variables:
    ENVIRONMENT: "prod"
  <<: *retry_config
  rules:
    - if: '($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main") && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_build
  artifacts:
    paths:
      - build/app/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa

deploy-prod:
  stage: deploy
  variables:
    ENVIRONMENT: "prod"
    FIREBASE_APP_ID_PARAM: ""
  <<: *retry_config
  needs:
    - build-prod
  rules:
    - if: '($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main") && $CI_COMMIT_TAG != null && $CI_COMMIT_TAG != ""'
  script:
    - *check_platform_to_deploy


### DEFINES ANCHORS:

# SETUP ENVIRONMENT
.setup_environment: &setup_environment
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        echo "$ENV_DEV_CONTENT" > lib/core/config/.env.dev
      elif [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then
        echo "$ENV_STAGING_CONTENT" > lib/core/config/.env.staging
      elif [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        echo "$ENV_PROD_CONTENT" > lib/core/config/.env.prod
      fi


# SETUP GOOGLE PLAY SERVICE ACCOUNT
.setup_google_play_service_account: &setup_google_play_service_account
  script:
    - |
      echo "$JSON_KEY_FILE_CONTENT" > android/google-play-service-account.json


# RETRY CONFIG
.retry_config: &retry_config
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure


# CHECK PLATFORM TO BUILD
.check_platform_to_build: &check_platform_to_build
  script:
    - |
      if [[ "$CI_COMMIT_TAG" =~ "android" ]]; then
        make build-app-bundle-${ENVIRONMENT}
      fi
      if [[ "$CI_COMMIT_TAG" =~ "ios" ]]; then
        make build-ios-${ENVIRONMENT}
      fi
      if [[ "$CI_COMMIT_TAG" =~ "android-ios" ]]; then
        make build-app-bundle-${ENVIRONMENT}
        make build-ios-${ENVIRONMENT}
      fi



# CHECK PLATFORM TO DEPLOY
.check_platform_to_deploy: &check_platform_to_deploy
  script:
    - |
      if [[ "$CI_COMMIT_TAG" =~ "android" ]]; then
        cd android
        bundle exec fastlane android deploy environment:${ENVIRONMENT} ${FIREBASE_APP_ID_PARAM}
      fi
      if [[ "$CI_COMMIT_TAG" =~ "ios" ]]; then
        cd ios
        bundle exec fastlane ios deploy environment:${ENVIRONMENT} ${FIREBASE_APP_ID_PARAM}
      fi
      if [[ "$CI_COMMIT_TAG" =~ "android-ios" ]]; then
        cd android
        bundle exec fastlane android deploy environment:${ENVIRONMENT} ${FIREBASE_APP_ID_PARAM}
        cd ..
        cd ios
        bundle exec fastlane ios deploy environment:${ENVIRONMENT} ${FIREBASE_APP_ID_PARAM}
      fi